{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/knight.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction NewComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NewComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NewComponent_div_7_p_1_Template, 2, 0, \"p\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.name.errors == null ? null : ctx_r1.name.errors[\"required\"]);\n  }\n}\nexport class NewComponent {\n  constructor(knightService) {\n    this.knightService = knightService;\n  }\n  ngOnInit() {\n    this.newForm = new FormGroup({\n      name: new FormControl(this.knight.name, [Validators.required]),\n      nickname: new FormControl(this.knight.nickName, [Validators.required]),\n      birthday: new FormControl(this.knight.birthday, [Validators.required]),\n      keyAttribute: new FormControl(this.knight.attribute, [Validators.required]),\n      strength: new FormControl(this.knight.strength, [Validators.required]),\n      dexterity: new FormControl(this.knight.dexterity, [Validators.required]),\n      constitution: new FormControl(this.knight.constitution, [Validators.required]),\n      intelligence: new FormControl(this.knight.intelligence, [Validators.required]),\n      charisma: new FormControl(this.knight.charisma, [Validators.required]),\n      wisdom: new FormControl(this.knight.wisdom, [Validators.required])\n    });\n  }\n  get name() {\n    return this.newForm.get('name;');\n  }\n  submit() {\n    if (this.newForm.invalid) return;\n    this.knightService.create(this.knight);\n  }\n}\nNewComponent.ɵfac = function NewComponent_Factory(t) {\n  return new (t || NewComponent)(i0.ɵɵdirectiveInject(i1.KnightService));\n};\nNewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewComponent,\n  selectors: [[\"app-new\"]],\n  decls: 14,\n  vars: 2,\n  consts: [[2, \"margin-top\", \"10px\"], [3, \"formGroup\", \"ngSubmit\"], [\"formDir\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"formControlName\", \"name\", \"id\", \"name\", \"placeholder\", \"your name\", \",\", \"\", \"required,\", \"\", 1, \"form-control\"], [\"class\", \"validation-error\", 4, \"ngIf\"], [\"for\", \"nickName\"], [\"type\", \"text\", \"id\", \"nickName\", \"placeholder\", \"Your nickName\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"validation-error\"], [4, \"ngIf\"]],\n  template: function NewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n      i0.ɵɵlistener(\"ngSubmit\", function NewComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"label\", 4);\n      i0.ɵɵtext(5, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 5);\n      i0.ɵɵtemplate(7, NewComponent_div_7_Template, 2, 1, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"label\", 7);\n      i0.ɵɵtext(10, \"Senha\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 9);\n      i0.ɵɵtext(13, \"Enviar\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.newForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.name.invalid && _r0.submitted);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".width[_ngcontent-%COMP%]{width: 200px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9uZXcvbmV3LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIud2lkdGh7d2lkdGg6IDIwMHB4O30iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SACEA,SAAS,EACTC,WAAW,EACXC,UAAU,QACL,gBAAgB;;;;;;;ICQPC,yBAAqC;IAAAA,iCAAiB;IAAAA,iBAAI;;;;;IAD9DA,+BAAwE;IACpEA,gEAA0D;IAC5DA,iBAAM;;;;IADAA,eAA+B;IAA/BA,yFAA+B;;;ADCnD,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAkB;EAEnDC,QAAQ;IAEN,IAAI,CAACC,OAAO,GAAG,IAAIR,SAAS,CAAC;MAC3BS,IAAI,EAAE,IAAIR,WAAW,CAAC,IAAI,CAACS,MAAM,CAACD,IAAI,EAAE,CAACP,UAAU,CAACS,QAAQ,CAAC,CAAC;MAC9DC,QAAQ,EAAE,IAAIX,WAAW,CAAC,IAAI,CAACS,MAAM,CAACG,QAAQ,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC,CAAC;MACtEG,QAAQ,EAAE,IAAIb,WAAW,CAAC,IAAI,CAACS,MAAM,CAACI,QAAQ,EAAE,CAACZ,UAAU,CAACS,QAAQ,CAAC,CAAC;MACtEI,YAAY,EAAE,IAAId,WAAW,CAAC,IAAI,CAACS,MAAM,CAACM,SAAS,EAAE,CAACd,UAAU,CAACS,QAAQ,CAAC,CAAC;MAC3EM,QAAQ,EAAE,IAAIhB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACO,QAAQ,EAAE,CAACf,UAAU,CAACS,QAAQ,CAAC,CAAC;MACtEO,SAAS,EAAE,IAAIjB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACQ,SAAS,EAAE,CAAChB,UAAU,CAACS,QAAQ,CAAC,CAAC;MACxEQ,YAAY,EAAE,IAAIlB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACS,YAAY,EAAE,CAACjB,UAAU,CAACS,QAAQ,CAAC,CAAC;MAC9ES,YAAY,EAAE,IAAInB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACU,YAAY,EAAE,CAAClB,UAAU,CAACS,QAAQ,CAAC,CAAC;MAC9EU,QAAQ,EAAE,IAAIpB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACW,QAAQ,EAAE,CAACnB,UAAU,CAACS,QAAQ,CAAC,CAAC;MACtEW,MAAM,EAAE,IAAIrB,WAAW,CAAC,IAAI,CAACS,MAAM,CAACY,MAAM,EAAE,CAACpB,UAAU,CAACS,QAAQ,CAAC;KAClE,CAAC;EAEJ;EAEA,IAAIF,IAAI;IACN,OAAO,IAAI,CAACD,OAAO,CAACe,GAAG,CAAC,OAAO,CAAE;EACnC;EAEAC,MAAM;IAEJ,IAAG,IAAI,CAAChB,OAAO,CAACiB,OAAO,EACrB;IAGA,IAAI,CAACnB,aAAa,CAACoB,MAAM,CAAC,IAAI,CAAChB,MAAM,CAAC;EAC1C;;AAnCWN,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdzB5B,8BAAgC;MAC1BA;QAAA,OAAY6B,YAAQ;MAAA,EAAC;MACnB7B,8BAAwB;MACJA,oBAAI;MAAAA,iBAAQ;MAC9BA,2BAMI;MAEFA,6DAEQ;MACZA,iBAAM;MACNA,8BAAwB;MACAA,sBAAK;MAAAA,iBAAQ;MACnCA,4BAI8B;MAChCA,iBAAM;MACNA,kCAA8C;MAAAA,uBAAM;MAAAA,iBAAS;;;;MAvBzCA,eAAqB;MAArBA,uCAAqB;MAW/BA,eAAuC;MAAvCA,wDAAuC","names":["FormGroup","FormControl","Validators","i0","NewComponent","constructor","knightService","ngOnInit","newForm","name","knight","required","nickname","nickName","birthday","keyAttribute","attribute","strength","dexterity","constitution","intelligence","charisma","wisdom","get","submit","invalid","create","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\hfink\\source\\repos\\knights-challenge\\src\\ui\\knight.angular\\src\\app\\components\\new\\new.component.ts","C:\\Users\\hfink\\source\\repos\\knights-challenge\\src\\ui\\knight.angular\\src\\app\\components\\new\\new.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n  FormGroup,\n  FormControl,\n  Validators,\n} from '@angular/forms';\nimport  {Knight} from 'src/app/knight';\nimport { KnightService} from 'src/app/services/knight.service'\n\n@Component({\n  selector: 'app-new',\n  templateUrl: './new.component.html',\n  styleUrls: ['./new.component.css']\n})\nexport class NewComponent implements OnInit {\n\n  newForm!: FormGroup;\n  knight! : Knight;\n\n  constructor(private knightService: KnightService) {}\n\n  ngOnInit() : void {\n\n    this.newForm = new FormGroup({\n      name: new FormControl(this.knight.name, [Validators.required]),\n      nickname: new FormControl(this.knight.nickName, [Validators.required]),\n      birthday: new FormControl(this.knight.birthday, [Validators.required]),\n      keyAttribute: new FormControl(this.knight.attribute, [Validators.required]),\n      strength: new FormControl(this.knight.strength, [Validators.required]),\n      dexterity: new FormControl(this.knight.dexterity, [Validators.required]),\n      constitution: new FormControl(this.knight.constitution, [Validators.required]),\n      intelligence: new FormControl(this.knight.intelligence, [Validators.required]),\n      charisma: new FormControl(this.knight.charisma, [Validators.required]),\n      wisdom: new FormControl(this.knight.wisdom, [Validators.required]),\n    });\n\n  }\n\n  get name(){\n    return this.newForm.get('name;')!;\n  }\n  \n  submit(){\n\n    if(this.newForm.invalid)\n      return;\n\n\n      this.knightService.create(this.knight);\n  }\n}\n","<div  style=\"margin-top: 10px;\">\n<form (ngSubmit)=\"submit()\" [formGroup]=\"newForm\" #formDir=\"ngForm\" >\n        <div class=\"form-group\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\" \n            class=\"form-control\" \n            formControlName=\"name\"\n            id=\"name\" \n            placeholder=\"your name\",\n            required,\n            />\n            \n            <div *ngIf=\"name.invalid && formDir.submitted\" class=\"validation-error\">\n                <p *ngIf=\"name.errors?.['required']\">Name is required.</p>\n              </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"nickName\">Senha</label>\n          <input \n            type=\"text\" \n            class=\"form-control\" \n            id=\"nickName\"\n            placeholder=\"Your nickName\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Enviar</button>\n      </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}