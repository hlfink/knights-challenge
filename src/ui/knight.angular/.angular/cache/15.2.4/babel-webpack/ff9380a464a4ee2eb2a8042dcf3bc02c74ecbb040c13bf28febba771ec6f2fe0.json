{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nlet NewComponent = class NewComponent {\n  constructor(knightService) {\n    this.knightService = knightService;\n    this.newForm = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      nickname: new FormControl('', [Validators.required]),\n      birthday: new FormControl('', [Validators.required]),\n      keyAttribute: new FormControl('', [Validators.required]),\n      strength: new FormControl('', [Validators.required]),\n      dexterity: new FormControl('', [Validators.required]),\n      constitution: new FormControl('', [Validators.required]),\n      intelligence: new FormControl('', [Validators.required]),\n      charisma: new FormControl('', [Validators.required]),\n      wisdom: new FormControl('', [Validators.required])\n    });\n    this.weaponForm = new FormGroup({\n      wname: new FormControl('', [Validators.required]),\n      mod: new FormControl('', [Validators.required]),\n      wattr: new FormControl('', [Validators.required]),\n      equipped: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.knight = {\n      birthday: new Date(),\n      name: '',\n      nickName: '',\n      attributes: {},\n      weapons: [],\n      keyAttribute: ''\n    };\n  }\n  get f() {\n    console.log(this.newForm.controls);\n    return this.newForm.controls;\n  }\n  get w() {\n    console.log(this.weaponForm.controls);\n    return this.weaponForm.controls;\n  }\n  submit() {\n    if (this.newForm.invalid) return;\n    if (this.knight.weapons.length == 0) return;\n    this.knight.birthday = this.newForm.get('birthday')?.value;\n    this.knight.name = this.newForm.get('name')?.value;\n    this.knight.nickName = this.newForm.get('nickname')?.value;\n    this.knight.keyAttribute = this.newForm.get('keyAttribute')?.value;\n    this.knight.attributes = {\n      'strength': parseInt(this.newForm.get('strength')?.value),\n      'dexterity': parseInt(this.newForm.get('dexterity')?.value),\n      'constitution': parseInt(this.newForm.get('constitution')?.value),\n      'intelligence': parseInt(this.newForm.get('intelligence')?.value),\n      'charisma': parseInt(this.newForm.get('charisma')?.value),\n      'wisdom': parseInt(this.newForm.get('wisdom')?.value)\n    };\n    this.knightService.create(this.knight).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    });\n  }\n  addWeapon() {\n    if (this.weaponForm.invalid) return;\n    this.knight.weapons.push({\n      name: this.weaponForm.get('wname')?.value,\n      attr: this.weaponForm.get('wattr')?.value,\n      equipped: this.weaponForm.get('equipped')?.value == '0' ? true : false,\n      mod: this.weaponForm.get('mod')?.value\n    });\n  }\n  deleteWeapon(index) {\n    if (index != -1) this.knight.weapons.slice(index, 1);\n  }\n};\nNewComponent = __decorate([Component({\n  selector: 'app-new',\n  templateUrl: './new.component.html',\n  styleUrls: ['./new.component.css']\n})], NewComponent);\nexport { NewComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","Validators","FormControl","NewComponent","constructor","knightService","name","required","nickname","birthday","keyAttribute","strength","dexterity","constitution","intelligence","charisma","wisdom","wname","mod","wattr","equipped","ngOnInit","knight","Date","nickName","attributes","weapons","f","console","log","newForm","controls","w","weaponForm","submit","invalid","length","get","value","parseInt","create","subscribe","response","error","addWeapon","push","attr","deleteWeapon","index","slice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hfink\\source\\repos\\knights-challenge\\src\\ui\\knight.angular\\src\\app\\components\\new\\new.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n   AbstractControl, FormBuilder, FormGroup, Validators, FormControl\n} from '@angular/forms';\nimport { knightRequest } from 'src/app/knightRequest';\nimport { KnightService} from 'src/app/services/knight.service'\n\n\n@Component({\n  selector: 'app-new',\n  templateUrl: './new.component.html',\n  styleUrls: ['./new.component.css']\n})\nexport class NewComponent implements OnInit {\n\n  newForm: FormGroup =  new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    nickname: new FormControl('', [Validators.required]),\n    birthday: new FormControl('', [Validators.required]),\n    keyAttribute: new FormControl('', [Validators.required]),\n    strength: new FormControl('', [Validators.required]),\n    dexterity: new FormControl('', [Validators.required]),\n    constitution: new FormControl('', [Validators.required]),\n    intelligence: new FormControl('', [Validators.required]),\n    charisma: new FormControl('', [Validators.required]),\n    wisdom: new FormControl('', [Validators.required]),\n  });\n\n  weaponForm: FormGroup = new FormGroup({\n    wname: new FormControl('', [Validators.required]),\n    mod: new FormControl('', [Validators.required]),\n    wattr : new FormControl('', [Validators.required]),\n    equipped: new FormControl('', [Validators.required]),\n  });\n\n  knight!: knightRequest\n\n  constructor(private knightService: KnightService) {}\n\n  ngOnInit() : void {\n    this.knight = {birthday : new Date(), name : '', nickName : '', attributes :{}, weapons : [], keyAttribute : ''}\n  }\n\n  get f(): { [key: string]: AbstractControl } {\n    console.log(this.newForm.controls)\n    return this.newForm.controls;\n  }\n\n  get w(): { [key: string]: AbstractControl } {\n    console.log(this.weaponForm.controls)\n    return this.weaponForm.controls;\n  }\n\n  submit(){\n    if(this.newForm.invalid)\n      return;\n\n    if(this.knight.weapons.length ==0)\n      return;\n\n      this.knight.birthday = this.newForm.get('birthday')?.value;\n      this.knight.name = this.newForm.get('name')?.value;\n      this.knight.nickName = this.newForm.get('nickname')?.value;\n      this.knight.keyAttribute = this.newForm.get('keyAttribute')?.value;\n\n      this.knight.attributes = {\n        'strength' : parseInt(this.newForm.get('strength')?.value)\n        ,'dexterity' : parseInt(this.newForm.get('dexterity')?.value)\n        ,'constitution' : parseInt(this.newForm.get('constitution')?.value)\n        ,'intelligence' : parseInt(this.newForm.get('intelligence')?.value)\n        ,'charisma' : parseInt(this.newForm.get('charisma')?.value )\n        ,'wisdom' : parseInt(this.newForm.get('wisdom')?.value )\n      };\n\n      this.knightService.create(this.knight).subscribe((response : any) =>{ console.log(response);},error => { console.log(error)});\n  }\n\n  addWeapon(){\n    if(this.weaponForm.invalid)\n      return;\n      \n      this.knight.weapons.push({\n        name : this.weaponForm.get('wname')?.value \n      , attr : this.weaponForm.get('wattr')?.value \n      , equipped : this.weaponForm.get('equipped')?.value == '0' ? true: false  \n      , mod : this.weaponForm.get('mod')?.value })\n  }\n  deleteWeapon(index: number){\n\n    if(index != -1)\n      this.knight.weapons.slice(index,1);\n  }\n  \n}\n "]},"metadata":{},"sourceType":"module","externalDependencies":[]}