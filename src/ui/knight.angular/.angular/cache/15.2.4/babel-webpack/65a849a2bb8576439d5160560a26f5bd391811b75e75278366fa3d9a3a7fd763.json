{"ast":null,"code":"import { FormGroup, Validators, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/knight.service\";\nimport * as i2 from \"@angular/forms\";\nexport class NewComponent {\n  constructor(knightService) {\n    this.knightService = knightService;\n    this.newForm = new FormGroup({\n      fullName: new FormControl('', [Validators.required]),\n      nickname: new FormControl('', [Validators.required]),\n      birthday: new FormControl('', [Validators.required]),\n      keyAttribute: new FormControl('', [Validators.required]),\n      strength: new FormControl('', [Validators.required]),\n      dexterity: new FormControl('', [Validators.required]),\n      constitution: new FormControl('', [Validators.required]),\n      intelligence: new FormControl('', [Validators.required]),\n      charisma: new FormControl('', [Validators.required]),\n      wisdom: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {}\n  get f() {\n    return this.newForm.controls;\n  }\n  submit() {\n    if (this.newForm.invalid) return;\n    this.knightService.create(this.knight);\n  }\n}\nNewComponent.ɵfac = function NewComponent_Factory(t) {\n  return new (t || NewComponent)(i0.ɵɵdirectiveInject(i1.KnightService));\n};\nNewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewComponent,\n  selectors: [[\"app-new\"]],\n  decls: 3,\n  vars: 0,\n  consts: [[2, \"margin-top\", \"10px\"], [3, \"ngSubmit\"], [1, \"form-group\"]],\n  template: function NewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function NewComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n  styles: [\".width[_ngcontent-%COMP%]{width: 200px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9uZXcvbmV3LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIud2lkdGh7d2lkdGg6IDIwMHB4O30iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SACiCA,SAAS,EAAEC,UAAU,EAAEC,WAAW,QAC5D,gBAAgB;;;;AAUvB,OAAM,MAAOC,YAAY;EAiBvBC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IAfjC,YAAO,GAAe,IAAIL,SAAS,CAAC;MAClCM,QAAQ,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDC,QAAQ,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDE,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDG,YAAY,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACxDI,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDK,SAAS,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACrDM,YAAY,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACxDO,YAAY,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACxDQ,QAAQ,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDS,MAAM,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACD,UAAU,CAACM,QAAQ,CAAC;KAClD,CAAC;EAIiD;EAEnDU,QAAQ,IAER;EAEA,IAAIC,CAAC;IACH,OAAO,IAAI,CAACC,OAAO,CAACC,QAAQ;EAC9B;EAEAC,MAAM;IAEJ,IAAG,IAAI,CAACF,OAAO,CAACG,OAAO,EACrB;IAGA,IAAI,CAACjB,aAAa,CAACkB,MAAM,CAAC,IAAI,CAACC,MAAM,CAAC;EAC1C;;AAlCWrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCbzBC,8BAAgC;MAC1BA;QAAA,OAAYC,YAAQ;MAAA,EAAC;MAClBD,yBASQ;MACXA,iBAAO","names":["FormGroup","Validators","FormControl","NewComponent","constructor","knightService","fullName","required","nickname","birthday","keyAttribute","strength","dexterity","constitution","intelligence","charisma","wisdom","ngOnInit","f","newForm","controls","submit","invalid","create","knight","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\hfink\\source\\repos\\knights-challenge\\src\\ui\\knight.angular\\src\\app\\components\\new\\new.component.ts","C:\\Users\\hfink\\source\\repos\\knights-challenge\\src\\ui\\knight.angular\\src\\app\\components\\new\\new.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {\n   AbstractControl, FormBuilder, FormGroup, Validators, FormControl\n} from '@angular/forms';\nimport  {Knight} from 'src/app/knight';\nimport { KnightService} from 'src/app/services/knight.service'\n\n\n@Component({\n  selector: 'app-new',\n  templateUrl: './new.component.html',\n  styleUrls: ['./new.component.css']\n})\nexport class NewComponent implements OnInit {\n\n  newForm: FormGroup =  new FormGroup({\n    fullName: new FormControl('', [Validators.required]),\n    nickname: new FormControl('', [Validators.required]),\n    birthday: new FormControl('', [Validators.required]),\n    keyAttribute: new FormControl('', [Validators.required]),\n    strength: new FormControl('', [Validators.required]),\n    dexterity: new FormControl('', [Validators.required]),\n    constitution: new FormControl('', [Validators.required]),\n    intelligence: new FormControl('', [Validators.required]),\n    charisma: new FormControl('', [Validators.required]),\n    wisdom: new FormControl('', [Validators.required]),\n  });\n;\n  knight! : Knight;\n\n  constructor(private knightService: KnightService) {}\n\n  ngOnInit() : void {\n\n  }\n\n  get f(): { [key: string]: AbstractControl } {\n    return this.newForm.controls;\n  }\n  \n  submit(){\n\n    if(this.newForm.invalid)\n      return;\n\n\n      this.knightService.create(this.knight);\n  }\n}\n","<div  style=\"margin-top: 10px;\">\n<form (ngSubmit)=\"submit()\"  >\n         <div class=\"form-group\">\n        <!--  <label for=\"fullName\">Name</label>\n          <input type=\"text\" \n            class=\"form-control\" \n            formControlName=\"fullName\"\n            placeholder=\"your name\",\n            />\n           <div *ngIf=\"formDir.submitted && f['fullName'].errors\" class=\"invalid-feedback\">\n               <div *ngIf=\"f['fullName'].errors['required']\">Fullname is required</div> -->\n           </div> \n      </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}